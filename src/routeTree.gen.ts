/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as PathlessRouteImport } from './routes/_pathless'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as ArticlesRouteRouteImport } from './routes/articles/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as ArticlesIndexRouteImport } from './routes/articles/index'
import { Route as ArticlesArticleIdRouteImport } from './routes/articles/$articleId'
import { Route as PathlessNestedLayoutRouteImport } from './routes/_pathless/_nested-layout'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthSignInRouteImport } from './routes/_auth/sign-in'
import { Route as PathlessNestedLayoutRouteBRouteImport } from './routes/_pathless/_nested-layout/route-b'
import { Route as PathlessNestedLayoutRouteARouteImport } from './routes/_pathless/_nested-layout/route-a'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessRoute = PathlessRouteImport.update({
  id: '/_pathless',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesRouteRoute = ArticlesRouteRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesIndexRoute = ArticlesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArticlesRouteRoute,
} as any)
const ArticlesArticleIdRoute = ArticlesArticleIdRouteImport.update({
  id: '/$articleId',
  path: '/$articleId',
  getParentRoute: () => ArticlesRouteRoute,
} as any)
const PathlessNestedLayoutRoute = PathlessNestedLayoutRouteImport.update({
  id: '/_nested-layout',
  getParentRoute: () => PathlessRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)
const PathlessNestedLayoutRouteBRoute =
  PathlessNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessNestedLayoutRoute,
  } as any)
const PathlessNestedLayoutRouteARoute =
  PathlessNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessNestedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/sign-in': typeof AuthSignInRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles/': typeof ArticlesIndexRoute
  '/posts': typeof PostsIndexRoute
  '/route-a': typeof PathlessNestedLayoutRouteARoute
  '/route-b': typeof PathlessNestedLayoutRouteBRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/sign-in': typeof AuthSignInRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles': typeof ArticlesIndexRoute
  '/posts': typeof PostsIndexRoute
  '/route-a': typeof PathlessNestedLayoutRouteARoute
  '/route-b': typeof PathlessNestedLayoutRouteBRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_pathless': typeof PathlessRouteWithChildren
  '/about': typeof AboutRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_pathless/_nested-layout': typeof PathlessNestedLayoutRouteWithChildren
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles/': typeof ArticlesIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/_pathless/_nested-layout/route-a': typeof PathlessNestedLayoutRouteARoute
  '/_pathless/_nested-layout/route-b': typeof PathlessNestedLayoutRouteBRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/articles'
    | '/about'
    | '/sign-in'
    | '/profile'
    | '/articles/$articleId'
    | '/articles/'
    | '/posts'
    | '/route-a'
    | '/route-b'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/sign-in'
    | '/profile'
    | '/articles/$articleId'
    | '/articles'
    | '/posts'
    | '/route-a'
    | '/route-b'
  id:
    | '__root__'
    | '/'
    | '/articles'
    | '/_auth'
    | '/_authenticated'
    | '/_pathless'
    | '/about'
    | '/_auth/sign-in'
    | '/_authenticated/profile'
    | '/_pathless/_nested-layout'
    | '/articles/$articleId'
    | '/articles/'
    | '/posts/'
    | '/_pathless/_nested-layout/route-a'
    | '/_pathless/_nested-layout/route-b'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArticlesRouteRoute: typeof ArticlesRouteRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PathlessRoute: typeof PathlessRouteWithChildren
  AboutRoute: typeof AboutRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathless': {
      id: '/_pathless'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles/': {
      id: '/articles/'
      path: '/'
      fullPath: '/articles/'
      preLoaderRoute: typeof ArticlesIndexRouteImport
      parentRoute: typeof ArticlesRouteRoute
    }
    '/articles/$articleId': {
      id: '/articles/$articleId'
      path: '/$articleId'
      fullPath: '/articles/$articleId'
      preLoaderRoute: typeof ArticlesArticleIdRouteImport
      parentRoute: typeof ArticlesRouteRoute
    }
    '/_pathless/_nested-layout': {
      id: '/_pathless/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessNestedLayoutRouteImport
      parentRoute: typeof PathlessRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_pathless/_nested-layout/route-b': {
      id: '/_pathless/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessNestedLayoutRouteBRouteImport
      parentRoute: typeof PathlessNestedLayoutRoute
    }
    '/_pathless/_nested-layout/route-a': {
      id: '/_pathless/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessNestedLayoutRouteARouteImport
      parentRoute: typeof PathlessNestedLayoutRoute
    }
  }
}

interface ArticlesRouteRouteChildren {
  ArticlesArticleIdRoute: typeof ArticlesArticleIdRoute
  ArticlesIndexRoute: typeof ArticlesIndexRoute
}

const ArticlesRouteRouteChildren: ArticlesRouteRouteChildren = {
  ArticlesArticleIdRoute: ArticlesArticleIdRoute,
  ArticlesIndexRoute: ArticlesIndexRoute,
}

const ArticlesRouteRouteWithChildren = ArticlesRouteRoute._addFileChildren(
  ArticlesRouteRouteChildren,
)

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PathlessNestedLayoutRouteChildren {
  PathlessNestedLayoutRouteARoute: typeof PathlessNestedLayoutRouteARoute
  PathlessNestedLayoutRouteBRoute: typeof PathlessNestedLayoutRouteBRoute
}

const PathlessNestedLayoutRouteChildren: PathlessNestedLayoutRouteChildren = {
  PathlessNestedLayoutRouteARoute: PathlessNestedLayoutRouteARoute,
  PathlessNestedLayoutRouteBRoute: PathlessNestedLayoutRouteBRoute,
}

const PathlessNestedLayoutRouteWithChildren =
  PathlessNestedLayoutRoute._addFileChildren(PathlessNestedLayoutRouteChildren)

interface PathlessRouteChildren {
  PathlessNestedLayoutRoute: typeof PathlessNestedLayoutRouteWithChildren
}

const PathlessRouteChildren: PathlessRouteChildren = {
  PathlessNestedLayoutRoute: PathlessNestedLayoutRouteWithChildren,
}

const PathlessRouteWithChildren = PathlessRoute._addFileChildren(
  PathlessRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArticlesRouteRoute: ArticlesRouteRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PathlessRoute: PathlessRouteWithChildren,
  AboutRoute: AboutRoute,
  PostsIndexRoute: PostsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
