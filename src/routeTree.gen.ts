/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as PathlessRouteImport } from './routes/_pathless'
import { Route as ArticlesRouteRouteImport } from './routes/articles/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as ArticlesIndexRouteImport } from './routes/articles/index'
import { Route as ArticlesArticleIdRouteImport } from './routes/articles/$articleId'
import { Route as PathlessNested_layoutRouteImport } from './routes/_pathless/_nested_layout'
import { Route as PathlessNested_layoutRouteBRouteImport } from './routes/_pathless/_nested_layout/route-b'
import { Route as PathlessNested_layoutRouteARouteImport } from './routes/_pathless/_nested_layout/route-a'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessRoute = PathlessRouteImport.update({
  id: '/_pathless',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesRouteRoute = ArticlesRouteRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesIndexRoute = ArticlesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArticlesRouteRoute,
} as any)
const ArticlesArticleIdRoute = ArticlesArticleIdRouteImport.update({
  id: '/$articleId',
  path: '/$articleId',
  getParentRoute: () => ArticlesRouteRoute,
} as any)
const PathlessNested_layoutRoute = PathlessNested_layoutRouteImport.update({
  id: '/_nested_layout',
  getParentRoute: () => PathlessRoute,
} as any)
const PathlessNested_layoutRouteBRoute =
  PathlessNested_layoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessNested_layoutRoute,
  } as any)
const PathlessNested_layoutRouteARoute =
  PathlessNested_layoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessNested_layoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles/': typeof ArticlesIndexRoute
  '/posts': typeof PostsIndexRoute
  '/route-a': typeof PathlessNested_layoutRouteARoute
  '/route-b': typeof PathlessNested_layoutRouteBRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles': typeof ArticlesIndexRoute
  '/posts': typeof PostsIndexRoute
  '/route-a': typeof PathlessNested_layoutRouteARoute
  '/route-b': typeof PathlessNested_layoutRouteBRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/_pathless': typeof PathlessRouteWithChildren
  '/about': typeof AboutRoute
  '/_pathless/_nested_layout': typeof PathlessNested_layoutRouteWithChildren
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles/': typeof ArticlesIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/_pathless/_nested_layout/route-a': typeof PathlessNested_layoutRouteARoute
  '/_pathless/_nested_layout/route-b': typeof PathlessNested_layoutRouteBRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/articles'
    | '/about'
    | '/articles/$articleId'
    | '/articles/'
    | '/posts'
    | '/route-a'
    | '/route-b'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/articles/$articleId'
    | '/articles'
    | '/posts'
    | '/route-a'
    | '/route-b'
  id:
    | '__root__'
    | '/'
    | '/articles'
    | '/_pathless'
    | '/about'
    | '/_pathless/_nested_layout'
    | '/articles/$articleId'
    | '/articles/'
    | '/posts/'
    | '/_pathless/_nested_layout/route-a'
    | '/_pathless/_nested_layout/route-b'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArticlesRouteRoute: typeof ArticlesRouteRouteWithChildren
  PathlessRoute: typeof PathlessRouteWithChildren
  AboutRoute: typeof AboutRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathless': {
      id: '/_pathless'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles/': {
      id: '/articles/'
      path: '/'
      fullPath: '/articles/'
      preLoaderRoute: typeof ArticlesIndexRouteImport
      parentRoute: typeof ArticlesRouteRoute
    }
    '/articles/$articleId': {
      id: '/articles/$articleId'
      path: '/$articleId'
      fullPath: '/articles/$articleId'
      preLoaderRoute: typeof ArticlesArticleIdRouteImport
      parentRoute: typeof ArticlesRouteRoute
    }
    '/_pathless/_nested_layout': {
      id: '/_pathless/_nested_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessNested_layoutRouteImport
      parentRoute: typeof PathlessRoute
    }
    '/_pathless/_nested_layout/route-b': {
      id: '/_pathless/_nested_layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessNested_layoutRouteBRouteImport
      parentRoute: typeof PathlessNested_layoutRoute
    }
    '/_pathless/_nested_layout/route-a': {
      id: '/_pathless/_nested_layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessNested_layoutRouteARouteImport
      parentRoute: typeof PathlessNested_layoutRoute
    }
  }
}

interface ArticlesRouteRouteChildren {
  ArticlesArticleIdRoute: typeof ArticlesArticleIdRoute
  ArticlesIndexRoute: typeof ArticlesIndexRoute
}

const ArticlesRouteRouteChildren: ArticlesRouteRouteChildren = {
  ArticlesArticleIdRoute: ArticlesArticleIdRoute,
  ArticlesIndexRoute: ArticlesIndexRoute,
}

const ArticlesRouteRouteWithChildren = ArticlesRouteRoute._addFileChildren(
  ArticlesRouteRouteChildren,
)

interface PathlessNested_layoutRouteChildren {
  PathlessNested_layoutRouteARoute: typeof PathlessNested_layoutRouteARoute
  PathlessNested_layoutRouteBRoute: typeof PathlessNested_layoutRouteBRoute
}

const PathlessNested_layoutRouteChildren: PathlessNested_layoutRouteChildren = {
  PathlessNested_layoutRouteARoute: PathlessNested_layoutRouteARoute,
  PathlessNested_layoutRouteBRoute: PathlessNested_layoutRouteBRoute,
}

const PathlessNested_layoutRouteWithChildren =
  PathlessNested_layoutRoute._addFileChildren(
    PathlessNested_layoutRouteChildren,
  )

interface PathlessRouteChildren {
  PathlessNested_layoutRoute: typeof PathlessNested_layoutRouteWithChildren
}

const PathlessRouteChildren: PathlessRouteChildren = {
  PathlessNested_layoutRoute: PathlessNested_layoutRouteWithChildren,
}

const PathlessRouteWithChildren = PathlessRoute._addFileChildren(
  PathlessRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArticlesRouteRoute: ArticlesRouteRouteWithChildren,
  PathlessRoute: PathlessRouteWithChildren,
  AboutRoute: AboutRoute,
  PostsIndexRoute: PostsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
